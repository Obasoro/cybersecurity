AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Template for AWS data ingest into Splunk using AWS Kinesis Firehose and AWS
  Lambda.
Mappings:
  BucketMap:
    us-east-1:
      BucketName: trumpet-splunk-prod-us-east-1
    us-east-2:
      BucketName: trumpet-splunk-prod-us-east-2
    us-west-1:
      BucketName: trumpet-splunk-prod-us-west-1
    us-west-2:
      BucketName: trumpet-splunk-prod-us-west-2
    ca-central-1:
      BucketName: trumpet-splunk-prod-ca-central-1
    eu-central-1:
      BucketName: trumpet-splunk-prod-eu-central-1
    eu-west-1:
      BucketName: trumpet-splunk-prod-eu-west-1
    eu-west-2:
      BucketName: trumpet-splunk-prod-eu-west-2
    eu-west-3:
      BucketName: trumpet-splunk-prod-eu-west-3
    ap-northeast-1:
      BucketName: trumpet-splunk-prod-ap-northeast-1
    ap-northeast-2:
      BucketName: trumpet-splunk-prod-ap-northeast-2
    ap-southeast-1:
      BucketName: trumpet-splunk-prod-ap-southeast-1
    ap-southeast-2:
      BucketName: trumpet-splunk-prod-ap-southeast-2
    ap-south-1:
      BucketName: trumpet-splunk-prod-ap-south-1
    sa-east-1:
      BucketName: trumpet-splunk-prod-sa-east-1
Resources:
  CloudTrailEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern:
        detail-type:
          - AWS API Call via CloudTrail
          - AWS Console Sign In via CloudTrail
      State: ENABLED
      Targets:
        - RoleArn: !GetAtt 
            - CWEFirehoseDeliveryRole
            - Arn
          Id: splunk_cloudtrail_firehose_target
          Arn: !GetAtt 
            - CWEFirehoseDeliveryStream
            - Arn
  CWEFirehoseProcessor:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !FindInMap 
          - BucketMap
          - !Ref 'AWS::Region'
          - BucketName
        S3Key: splunk_cwe_firehose_processor_v0.3.zip
      Description: >-
        Stream events from CloudWatch Events to Splunk using HTTP event
        collector
      MemorySize: 512
      Handler: lambda_function.handler
      Role: !GetAtt 
        - CWEFirehoseProcessorRole
        - Arn
      Timeout: 300
      Runtime: python3.7
  CWEFirehoseDeliveryStream:
    Type: 'AWS::KinesisFirehose::DeliveryStream'
    Properties:
      SplunkDestinationConfiguration:
        S3Configuration:
          CompressionFormat: UNCOMPRESSED
          BucketARN: !GetAtt 
            - CWEBackupS3Bucket
            - Arn
          RoleARN: !GetAtt 
            - CWEBackupS3Role
            - Arn
          BufferingHints:
            IntervalInSeconds: 300
            SizeInMBs: 1
        HECEndpointType: Event
        HECToken: 126901ED-8D0E-4ED3-800E-5649721F7397
        HECAcknowledgmentTimeoutInSeconds: 180
        RetryOptions:
          DurationInSeconds: 300
        HECEndpoint: 'https://http-inputs-firehose-aetv.splunkcloud.com/services/collector/event'
        S3BackupMode: FailedEventsOnly
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt 
                    - CWEFirehoseProcessor
                    - Arn
                - ParameterName: RoleArn
                  ParameterValue: !GetAtt 
                    - CWEBackupS3Role
                    - Arn
              Type: Lambda
      DeliveryStreamType: DirectPut
  CWEFirehoseDeliveryRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'sts:AssumeRole'
            Sid: ''
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
  CWEFirehoseDeliveryPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'firehose:PutRecord'
              - 'firehose:PutRecordBatch'
            Resource:
              - !GetAtt 
                - CWEFirehoseDeliveryStream
                - Arn
            Effect: Allow
      Roles:
        - !Ref CWEFirehoseDeliveryRole
  CWEBackupS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      VersioningConfiguration:
        Status: Enabled
  CWEBackupS3Role:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      Policies:
        - PolicyName: CWEBackupS3Role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: ''
                Effect: Allow
                Action:
                  - 'glue:GetTableVersions'
                Resource: '*'
              - Sid: ''
                Effect: Allow
                Action:
                  - 's3:AbortMultipartUpload'
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:ListBucketMultipartUploads'
                  - 's3:PutObject'
                Resource: '*'
              - Sid: ''
                Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:GetFunctionConfiguration'
                Resource: '*'
              - Sid: ''
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Sid: ''
                Effect: Allow
                Action:
                  - 'kinesis:DescribeStream'
                  - 'kinesis:GetShardIterator'
                  - 'kinesis:GetRecords'
                Resource: '*'
              - Sid: ''
                Effect: Allow
                Action:
                  - 'kms:Decrypt'
                Resource: '*'
                Condition:
                  StringEquals:
                    'kms:ViaService': !Join 
                      - ''
                      - - kinesis.
                        - !Ref 'AWS::Region'
                        - .amazonaws.com
                  StringLike:
                    'kms:EncryptionContext:aws:kinesis:arn': !Join 
                      - ''
                      - - 'arn:aws:kinesis:'
                        - !Ref 'AWS::Region'
                        - ':'
                        - !Ref 'AWS::AccountId'
                        - ':stream/%FIREHOSE_STREAM_NAME%'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'sts:AssumeRole'
            Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
  CWEFirehoseProcessorRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: CWEFirehoseProcessorPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 'kinesis:GetRecords'
                  - 'kinesis:GetShardIterator'
                  - 'kinesis:DescribeStream'
                  - 'kinesis:ListStreams'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  VPCtoKinesisFirehoseRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyName: VPCtoKinesisFirehosePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'firehose:*'
                Resource:
                  - 'arn:aws:firehose:*:*:*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource:
                  - 'arn:aws:iam::*:role/VPCtoKinesisFirehoseRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service: !Join 
              - ''
              - - logs.
                - !Ref 'AWS::Region'
                - .amazonaws.com
  VPCFirehoseDeliveryStream:
    Type: 'AWS::KinesisFirehose::DeliveryStream'
    Properties:
      SplunkDestinationConfiguration:
        S3Configuration:
          CompressionFormat: UNCOMPRESSED
          BucketARN: !GetAtt 
            - VPCBackupS3Bucket
            - Arn
          RoleARN: !GetAtt 
            - VPCBackupS3Role
            - Arn
          BufferingHints:
            IntervalInSeconds: 300
            SizeInMBs: 1
        HECEndpointType: Event
        HECToken: 126901ED-8D0E-4ED3-800E-5649721F7397
        HECAcknowledgmentTimeoutInSeconds: 180
        RetryOptions:
          DurationInSeconds: 300
        HECEndpoint: 'https://http-inputs-firehose-aetv.splunkcloud.com/services/collector/event'
        S3BackupMode: FailedEventsOnly
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt 
                    - VPCFirehoseProcessor
                    - Arn
                - ParameterName: RoleArn
                  ParameterValue: !GetAtt 
                    - VPCBackupS3Role
                    - Arn
              Type: Lambda
      DeliveryStreamType: DirectPut
  VPCFirehoseDeliveryRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'sts:AssumeRole'
            Sid: ''
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
  VPCFirehoseDeliveryPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'firehose:PutRecord'
              - 'firehose:PutRecordBatch'
            Resource:
              - !GetAtt 
                - VPCFirehoseDeliveryStream
                - Arn
            Effect: Allow
      Roles:
        - !Ref VPCFirehoseDeliveryRole
  VPCBackupS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      VersioningConfiguration:
        Status: Enabled
  VPCBackupS3Role:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      Policies:
        - PolicyName: VPCBackupS3Role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:AbortMultipartUpload'
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:ListBucketMultipartUploads'
                  - 's3:PutObject'
                Resource: '*'
                Effect: Allow
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:GetFunctionConfiguration'
                Resource: '*'
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'sts:AssumeRole'
            Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
  VPCFirehoseProcessorRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: VPCFirehoseProcessorPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:*:*:*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  VPCFirehoseProcessor:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !FindInMap 
          - BucketMap
          - !Ref 'AWS::Region'
          - BucketName
        S3Key: splunk_vpc_firehose_processor_v0.3.zip
      Description: Stream events from VPC Flow Logs to Splunk using HTTP event collector
      MemorySize: 512
      Handler: lambda_function.handler
      Role: !GetAtt 
        - VPCFirehoseProcessorRole
        - Arn
      Timeout: 300
      Runtime: python3.7
  VPCFlowLogSubscriptionFilterflowlog:
    Type: 'AWS::Logs::SubscriptionFilter'
    Properties:
      RoleArn: !GetAtt 
        - VPCtoKinesisFirehoseRole
        - Arn
      LogGroupName: vpc_flow_logs
      FilterPattern: ''
      DestinationArn: !GetAtt 
        - VPCFirehoseDeliveryStream
        - Arn